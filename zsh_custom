echo 'zsh_custom loaded';
eval "$(/opt/homebrew/bin/brew shellenv)"

# Set Variables
HOSTNAME=$(hostname)
export NULLCMD=bat
export DOTFILES="$HOME/.dotfiles"
export HOMEBREW_DIR="$DOTFILES/$HOSTNAME"
export HOMEBREW_BUNDLE_FILE="$HOMEBREW_DIR/Brewfile"

# Adjust History Variables & Options

[[ -z $HISTFILE ]] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=5000 # Session Memory Limit
SAVEHIST=4000 # File Memory Limit

setopt HIST_SAVE_NO_DUPS # Do not write a duplicate event to the history file.
setopt histNoStore
setopt extendedHistory
setopt histIgnoreAllDups
unsetopt appendHistory # explicit and unnecessary
setopt incAppendHistoryTime

# VI Mode ( https://github.com/softmoth/zsh-vim-mode?tab=readme-ov-file )
MODE_CURSOR_VIINS="#00ff00 blinking bar"
MODE_CURSOR_REPLACE="$MODE_CURSOR_VIINS #ff0000"
MODE_CURSOR_VICMD="green block"
MODE_CURSOR_SEARCH="#ff00ff steady underline"
MODE_CURSOR_VISUAL="$MODE_CURSOR_VICMD steady bar"
MODE_CURSOR_VLINE="$MODE_CURSOR_VISUAL #00ffff"

# Create Aliases
alias ~="cd ~"                              # ~:            Go Home
alias ..='cd ../'                           # Go back 1 directory level
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels

bindkey "รง" fzf-cd-widget # option + c

alias als='alias | grep'
alias brave='/Applications/Brave\ Browser.app/Contents/MacOS/Brave\ Browser'
alias cic='set completion-ignore-case On'   # cic:   Make tab-completion case-insensitive
alias cp='cp -iv'                           # Preferred cp implementation
alias d='cd ~/Documents/'
alias dockerkill='docker kill $(docker ps -q)'
alias dockerstop='docker ps -aq | xargs docker stop'
alias docx2pdf='/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf --outdir . "$1"'
alias edit='open -na "IntelliJ IDEA.app" --args "$@"'
alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias flushdns="sudo killall -HUP mDNSResponder"
alias ftrail='<<<${(F)fpath}'
alias gr="git recentco"
alias hosts="sudo vim /etc/hosts"
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias ls='lsd -la'
alias man=batman
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias openb='open -na "Brave Browser" --args "$1"'
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias python='/opt/homebrew/bin/python3'
alias reload="source ~/.zshrc"              # reload:       Reload the shell (i.e. itself)
alias rm=trash                              # rm:           Trash (move to trash)
alias show_options='shopt'                  # Show_options: display bash options settings
alias spotifyfix='brew uninstall --cask spotify && brew cleanup && launchctl remove com.spotify.client.startuphelper && brew install --cask spotify'
alias zshrc="code ~/.dotfiles/zshrc"

# FZF
alias sd='cd "$(fd --type d --exclude Applications --exclude Library --exclude Movies | fzf)"' # search for directories

# search for code
ss() {
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case"
    INITIAL_QUERY="${1:-}"
    FILE_PATTERN="${2:-}"

    if [ -n "$FILE_PATTERN" ]; then
        RG_PREFIX="$RG_PREFIX -g '$FILE_PATTERN'"
    fi

    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'"
    CHOICE=$(fzf --bind "change:reload:$RG_PREFIX {q} || true" \
        --sort \
        --multi \
        --preview 'rg --pretty --context 10 --color=always {q} $(echo {} | cut -d: -f1)' \
        --ansi --phony --query "$INITIAL_QUERY")

    if [ -n "$CHOICE" ]
    then
        FILE=$(echo "$CHOICE" | cut -d: -f1)
        LINE=$(echo "$CHOICE" | cut -d: -f2)
        code -g "$FILE:$LINE"
    fi
}

# search for files by regex with dynamic updates
sf() {
    local INITIAL_PATTERN="${1:-}"

    FILE=$(FZF_DEFAULT_COMMAND="fd --type f --exclude Applications --exclude Library --exclude Movies '$INITIAL_PATTERN'" \
        fzf --bind "change:reload:fd --type f --exclude Applications --exclude Library --exclude Movies {q} || true" \
            --query "$INITIAL_PATTERN" \
            --preview 'bat --color=always --style=header,grid --line-range :300 {}' \
            --phony)

    if [ -n "$FILE" ]; then
        open "$FILE"
    fi
}

alias bundle='nocorrect bundle'

# Laravel
alias sail="./vendor/bin/sail"
alias sailrebuild="sail build --no-cache"
alias samfs="sail artisan migrate:fresh --seed"
alias sart="sail artisan"
alias sartc="sail artisan cache:clear"

cd() { builtin cd "$@"; ls; }               # Always list directory contents upon 'cd'
# Define the function

function oo() {
  if [ -z "$1" ]; then
    open .
  else
    open "$1"
  fi
}

# Load history into shell (shareHistory alternative)
alias lh='fc -RI; echo "loaded and showing..."; history;'

# Write Handy Functions
function zh() {
  if [[ "$1" == "-"* && "$1" != "" ]]; then
    pattern="${1#-}"
    grep -v "$pattern" ~/.zsh_history > ~/.zsh_history.tmp && mv ~/.zsh_history.tmp ~/.zsh_history
    echo "Removed entries containing '$pattern' from ~/.zsh_history"
  else
    command vim ~/.zsh_history
  fi
}


function mkcd() { mkdir -p "$@" && cd "$_"; }
function trash () { command mv "$@" ~/.Trash ; }

# MOV files
function ffmov () { ffmpeg -i "$1" -vcodec h264 -acodec aac "${2:-output.mp4}" }
function ffmov_no_audio () { ffmpeg -i "$1" -vcodec h264 -an "${2:-output-no-audio.mp4}"}
function ffwebm () { ffmpeg -i "$1" -movflags faststart -profile:v high -level 4.2 "${2:-output.mp4}" }
function m4amp3 () { ffmpeg -i "$1" -codec:v copy -codec:a libmp3lame -q:a 2 "${2:-output.mp3}" }

function killname() {  if [ "$1" = "" ]; then
     echo "Nothing to do"
  else
    ps -ej | grep "$1"
    ps -ej | grep "$1" | awk '{print $2}' | xargs kill -s SIGINT
  fi
}

function kp (){ kill -9 $(lsof -i:"$1" -t); }
function hist_remove() {
    local search_string="$1"
    if [[ -z "$search_string" ]]; then
        echo "Please provide a search string."
        return 1
    fi

    # Create a temporary file
    local temp_file=$(mktemp)

    # Filter out lines containing the search string
    grep -v "$search_string" ~/.zsh_history > "$temp_file"

    # Replace the original file with the filtered content
    mv "$temp_file" ~/.zsh_history

    echo "Lines containing '$search_string' have been removed from ~/.zsh_history"
}
# Brew
alias brew_outdated="brew outdated --cask --greedy"
alias brew_permissions="sudo chown -R $(whoami) $(brew --prefix)/*"
alias brew_upgrade_casks='for cask in $(brew outdated --cask --greedy); do brew upgrade --cask "$cask"; done'
alias brewdump="mkdir -p $HOMEBREW_DIR && cd $HOMEBREW_DIR && brew bundle dump --force --describe && bat Brewfile"
alias mysql="/opt/homebrew/opt/mysql@8.4/bin/mysql"

# AnkiConnect
alias anki_rm='function _anki_delete() { curl -X POST localhost:8765 -d "{\"action\": \"deleteNotes\", \"version\": 6, \"params\": {\"notes\": [$1]}}"; }; _anki_delete'

# anki_tgfe "Your Title" "Your Back Content" "https://your-url.com"
alias anki_tgfe='function _anki_create() {
  front=$(echo "$1" | sed "s/\"/\\\\\"/g")
  back=$(echo "$2" | sed "s/\"/\\\\\"/g")
  url=$(echo "$3" | sed "s/\"/\\\\\"/g")

  curl -X POST localhost:8765 -d "{\"action\": \"addNote\", \"version\": 6, \"params\": {\"note\": {\"deckName\": \"The Great Frontend\", \"modelName\": \"Basic\", \"fields\": {\"Front\": \"${front}\", \"Back\": \"${back}\", \"url\": \"${url}\"}, \"options\": {\"cardType\": \"tgfe\"}}}}"
}; _anki_create'


function cody_tgfe() {
    # Extract clean URL path
    clean_url=$(echo "$1" | sed -E 's/https:\/\/www.greatfrontend.com(.+)\?.*/\1/')

    # Fetch and extract content
    page_content=$(curl -s "$1" | pup 'article[aria-labelledby="question-title"] div.prose text{}')
    header=$(curl -s "$1" | pup 'header text{}')

    # Get title using Cody with focused content
    title=$(cody chat -m "Analyze this content and return only the question title: $header. \n \n No introductions, no conclusions. Only the question title" | head -n 1)

    # Get summary with HTML formatting
    back_content=$(cody chat -m "Create a summary of these key technical points. Format as HTML unordered list (<ul><li>). No markdown, no introductions or conclusions. Only interpret the supplied content. This is the supplied content here in its entirety: $page_content" | tr '\n' ' ')

    # Create Anki card using our improved anki_tgfe function
    anki_tgfe "$title" "$back_content" "$clean_url"

    # Show preview
    echo "Created card:"
    echo "Title: $title"
    echo "Content: $back_content"
    echo "URL: $clean_url"
}

git() {
    if [[ "$*" =~ (push.*-f|push.*--force|-f.*push|--force.*push) ]]; then
        echo "No! Use --force-with-lease instead (git pwl)"
    else
        command git "$@"
    fi
}
export EDITOR="code --wait"
