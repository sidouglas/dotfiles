echo 'zsh_custom loaded';
eval $(thefuck --alias)
eval "$(/opt/homebrew/bin/brew shellenv)"

# Set Variables
HOSTNAME=$(hostname)
export NULLCMD=bat
export DOTFILES="$HOME/.dotfiles"
export HOMEBREW_DIR="$DOTFILES/$HOSTNAME"
export HOMEBREW_BUNDLE_FILE="$HOMEBREW_DIR/Brewfile"

# Adjust History Variables & Options

[[ -z $HISTFILE ]] && HISTFILE="$HOME/.zsh_history"
HISTSIZE=5000 # Session Memory Limit
SAVEHIST=4000 # File Memory Limit

# Resources:
# Using this plugin: https://github.com/jeffreytse/zsh-vi-mode
# Adding Vi To Your Zsh: https://dougblack.io/words/zsh-vi-mode.html
# Pure by Sindre Sørhus: https://github.com/sindresorhus/pure

# Use vim editing mode in terminal [escape to enter normal mode]
bindkey -v

# Restore some keymaps removed by vim keybind mode
bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char
bindkey '^w' backward-kill-word
ZVM_VI_INSERT_ESCAPE_BINDKEY=jj

## VI MODE FOR SHELL
# Dependencies for the following lines
zmodload zsh/zle
autoload -U colors && colors

# Change prompt icon + color based on insert/normal vim mode in prompt
# Will have no effect if you don't use pure as your ZSH theme
export PURE_PROMPT_SYMBOL="[I] ❯"
export PURE_PROMPT_VICMD_SYMBOL="%{$fg[green]%}[N] ❮%{$reset_color%}"

# By default, we have insert mode shown on right hand side
export RPROMPT="%{$fg[blue]%}[INSERT]%{$reset_color%}"

# And also a beam as the cursor
echo -ne '\e[5 q'

# Callback for vim mode change
function zle-keymap-select () {
    # Only supported in these terminals
    if [ "$TERM" = "xterm-256color" ] || [ "$TERM" = "xterm-kitty" ] || [ "$TERM" = "screen-256color" ]; then
        if [ $KEYMAP = vicmd ]; then
            # Command mode
            export RPROMPT="%{$fg[green]%}[NORMAL]%{$reset_color%}"

            # Set block cursor
            echo -ne '\e[1 q'
        else
            # Insert mode
            export RPROMPT="%{$fg[blue]%}[INSERT]%{$reset_color%}"

            # Set beam cursor
            echo -ne '\e[5 q'
        fi
    fi

    if typeset -f prompt_pure_update_vim_prompt_widget > /dev/null; then
        # Refresh prompt and call Pure super function
        prompt_pure_update_vim_prompt_widget
    fi
}

# Bind the callback
zle -N zle-keymap-select

# Reduce latency when pressing <Esc>
export KEYTIMEOUT=10

## END VI MODE

setopt histNoStore
setopt extendedHistory
setopt histIgnoreAllDups
unsetopt appendHistory # explicit and unnecessary
setopt incAppendHistoryTime


# Create Aliases
alias ~="cd ~"                              # ~:            Go Home
alias ..='cd ../'                           # Go back 1 directory level
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels

bindkey "ç" fzf-cd-widget # option + c

alias als='alias | grep'
alias cic='set completion-ignore-case On'   # cic:   Make tab-completion case-insensitive
alias cp='cp -iv'                           # Preferred cp implementation
alias d='cd ~/Documents/'
alias dockerkill='docker kill $(docker ps -q)'
alias dockerstop='docker ps -aq | xargs docker stop'
alias docx2pdf='/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf --outdir . "$1"'
alias edit='open -na "IntelliJ IDEA.app" --args "$@"'
alias exa='exa -laFh --git'

alias fix_stty='stty sane'                  # fix_stty:     Restore terminal settings when screwed up
alias flushdns="sudo killall -HUP mDNSResponder"
alias ftrail='<<<${(F)fpath}'
alias gr="git recentco"
alias hosts="sudo nano /etc/hosts"
alias ip="curl ifconfig.me"
alias less='less -FSRXc'                    # Preferred 'less' implementation
alias ls='exa'
alias man=batman
alias mkdir='mkdir -pv'                     # Preferred 'mkdir' implementation
alias mv='mv -iv'                           # Preferred 'mv' implementation
alias openb='open -na "Brave Browser" --args "$1"'
alias path='echo -e ${PATH//:/\\n}'         # path:         Echo all executable Paths
alias python='/opt/homebrew/bin/python3'
alias reload="source ~/.zshrc"              # reload:       Reload the shell (i.e. itself)
alias rm=trash                              # rm:           Trash (move to trash)
alias show_options='shopt'                  # Show_options: display bash options settings
alias wtf=fuck
alias yt='echo "******USE ytdl id url OR ytbest url*******" && yt-dlp -F'                        # Will show all possible downloads
alias ytbest="yt-dlp -f 'bv*+ba' $1"
alias ytdl="yt-dlp -f $1 $2"
alias ytlist="yt-dlp --list-formats $1"
alias ytmp3='yt-dlp -x --audio-format mp3'  # Download from youtube, as mp3
# FZF

# choose a folder to open with vs code
fc() {
  fd --type f --exclude .git --exclude node_modules | fzf --preview 'bat --style=numbers --color=always {}' | xargs -o open
}

ff() {
  folder=$(fd --type d --exclude node_modules --exclude .git | fzf)
  if [ -n "$folder" ]; then
    echo "Open in: (1) Finder, (2) VS Code"
    read choice
    case "$choice" in
      1|"1"|"Finder"|"finder")
        open "$folder"
        ;;
      2|"2"|"VS Code"|"vs code"|"vscode")
        code "$folder"
        ;;
      *)
        echo "Invalid choice. Folder not opened."
        ;;
    esac
  fi
}
# Laravel
alias sail="./vendor/bin/sail"
alias sailrebuild="sail build --no-cache"
alias samfs="sail artisan migrate:fresh --seed"
alias sart="sail artisan"
alias sartc="sail artisan cache:clear"

cd() { builtin cd "$@"; ls; }               # Always list directory contents upon 'cd'

# Load history into shell (shareHistory alternative)
alias lh='fc -RI; echo "loaded and showing..."; history;'

# Write Handy Functions
function mkcd() { mkdir -p "$@" && cd "$_"; }
function trash () { command mv "$@" ~/.Trash ; }

# MOV files
function ffmov () { ffmpeg -i "$1" -vcodec h264 -acodec aac "${2:-output.mp4}" }
function ffmov_no_audio () { ffmpeg -i "$1" -vcodec h264 -an "${2:-output-no-audio.mp4}"}
function ffwebm () { ffmpeg -i "$1" -movflags faststart -profile:v high -level 4.2 "${2:-output.mp4}" }
function m4amp3 () { ffmpeg -i "$1" -codec:v copy -codec:a libmp3lame -q:a 2 "${2:-output.mp3}" }

function killname() {  if [ "$1" = "" ]; then
     echo "Nothing to do"
  else
    ps -ej | grep "$1"
    ps -ej | grep "$1" | awk '{print $2}' | xargs kill -s SIGINT
  fi
}

function kp (){ kill -9 $(lsof -i:"$1" -t); }
function hist_remove() {
    local search_string="$1"
    if [[ -z "$search_string" ]]; then
        echo "Please provide a search string."
        return 1
    fi

    # Create a temporary file
    local temp_file=$(mktemp)

    # Filter out lines containing the search string
    grep -v "$search_string" ~/.zsh_history > "$temp_file"

    # Replace the original file with the filtered content
    mv "$temp_file" ~/.zsh_history

    echo "Lines containing '$search_string' have been removed from ~/.zsh_history"
}
# Brew
alias brew_outdated="brew outdated --cask --greedy"
alias brew_permissions="sudo chown -R $(whoami) $(brew --prefix)/*"
alias brew_upgrade_casks='for cask in $(brew outdated --cask --greedy); do brew upgrade --cask "$cask"; done'
alias brewdump="mkdir -p $HOMEBREW_DIR && cd $HOMEBREW_DIR && brew bundle dump --force --describe && bat Brewfile"

#Supabase
alias migra="docker run djrobstep/migra migra"
