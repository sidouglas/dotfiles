# [user]
# name = Simon Douglas
# email = 1107946+sidouglas@users.noreply.github.com

[user]
  name = Simon Douglas
  email = sdouglas@spotify.com

[alias]
    # taken from https://gist.github.com/mwhite/6887990
    l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    wip = !HUSKY=0 git add --all && HUSKY=0 git commit -n -m 'wip' --no-verify --no-gpg-sign
    fix = !HUSKY=0 git wip && HUSKY=0 git squash 2 --no-verify --no-gpg-sign
    nuke = !sh -c 'git checkout staging && git branch -df $1 && git checkout -b $1'
    nukeall ="!git checkout staging & git branch | grep -v "staging" | xargs git branch -d"
    a = add
    ap = add -p
    c = commit --verbose
    ca = commit -a --verbose
    cam = commit -a -m
    cm = commit -m
    cob = checkout -b
    d = diff
    dc = diff --cached
    ds = diff --stat
    gp = git push -u origin HEAD
    gpf = git push -u origin HEAD -f
    h = push
    m = commit --amend --verbose
    p = pull
    rename = "!git branch -m "
    soft = "!git reset --soft \"HEAD^\""
    rbs = "!git fetch origin staging && git rebase origin/staging"
    rbm = "!git fetch origin master && git rebase origin/master"
    s = status
    search = "!f() { git log -p -S \"$1\" -- \"${2:-.}\"; }; f"
    ss = "!git fetch --all && git branch -r --sort=-committerdate --format=\"%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)\" --color=always"
    t = "!git describe --abbrev=0"

    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"
    co = "!git checkout $(git branch | fzf | tr -d '[:space:]')"


    # https://gist.github.com/hlecuanda/c9a5091938cd6a7b585d
    squash = "!f(){ HUSKY=0 git reset --soft HEAD~${1} && HUSKY=0 git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    tidy="!git remote prune origin && git branch --merged > /tmp/merged-branches && sed -E '/(staging|master)/d' /tmp/merged-branches > /tmp/clean-branches && nano /tmp/clean-branches && xargs git branch -d </tmp/clean-branches"
    # purge = "!git branch --no-merged | sed -E '/(^\*|master|dev|uat)/' | xargs git branch -df"
    #This is a useful one for me, it allows me to rebase with the tracking branch even if I have uncommitted changes. Credit goes to @cmsolomon.
    rb = "!f() { \
            echo fetching...; \
            git fetch; \
            if [ $? -eq 0 ]; then \
                last_status=$(git status --untracked-files=no --porcelain); \
                if [ \"$last_status\" != \"\" ]; then \
                    echo stashing local changes...; \
                    git stash; \
                else \
                    echo nothing to stash...; \
                fi;\
                if [ $? -eq 0 ]; then \
                    echo rebasing...;\
                    git rebase;\
                    if [ $? -eq 0 ]; then \
                        if [ \"$last_status\" != \"\" ]; then\
                            echo applying stashed changes...;\
                            git stash pop;\
                            if [ $? -ne 0 ]; then \
                                echo STASH POP FAIL - you will need to resolve merge conflicts with git mergetool; \
                            fi; \
                        fi; \
                    else \
                        echo REBASE FAILED - you will need to manually run stash pop; \
                    fi;\
                fi;\
            fi; \
            if [ $? -ne 0 ]; then \
                echo ERROR: Operation failed; \
            fi; \
        }; f"

[core]
  mergeoptions = --no-edit
  editor = nano
[pull]
	ff = true
[push]
	autoSetupRemote = true

[branch]
    sort = -committerdate     # Descending
