[user]
	name = Simon Douglas
	email = 1107946+sidouglas@users.noreply.github.com

[merge]
	tool = deltawalker
#   tool = vscode
[mergetool "vscode"]
  cmd = code --wait $MERGED

[alias]
    # taken from https://gist.github.com/mwhite/6887990
    a = add
    ap = add -p
    c = commit --verbose
    ca = commit -a --verbose
    cam = commit -a -m
    cm = commit -m
    cob = checkout -b
    d = diff
    dc = diff --cached
    ds = diff --stat
    f = fetch
    co = "!git branch | fzf | xargs git checkout"
    fix = !HUSKY=0 LEFTHOOK=0 git wip && HUSKY=0 LEFTHOOK=0 git squash 2 --no-verify --no-gpg-sign
    pwl = push --force-with-lease
    o = checkout
    ho = git push -u origin HEAD
    hof = git push -u origin HEAD -force-with-lease #https:://youtu.be/aolI_Rz0ZqY?t=1128
    l = log --pretty=format:'%C(yellow)%h %C(blue)%ad%C(red)%d %C(reset)%s%C(green) [%cn]' --decorate --date=format-local:'%Y-%m-%d %H:%M:%S AEDT'
    m = commit --amend --verbose
    nuke = !sh -c 'git checkout main && git branch -df $1 && git checkout -b $1'
    nukeall = "!f() { \
      if git rev-parse --verify main >/dev/null 2>&1; then \
        primary='main'; \
      elif git rev-parse --verify master >/dev/null 2>&1; then \
        primary='master'; \
      else \
        echo 'Neither main nor master branch found'; \
        return 1; \
      fi; \
      git checkout $primary && \
      git branch | grep -v \"$primary\" | xargs git branch -D; \
    }; f"
    p = pull
    wip = !HUSKY=0 LEFTHOOK=0 git add --all && HUSKY=0 LEFTHOOK=0 git commit -n -m 'wip' --no-verify --no-gpg-sign
  	rbm = "!f() { git fetch origin; if git show-ref --verify --quiet refs/heads/main; then git rebase origin/main; else git rebase origin/master; fi; }; f"
    rbs = "!git fetch origin staging && git rebase origin/staging"
    rename = "!git branch -m "
    revert = "!f() { git checkout master -- $1 && git add $1 && git commit -m \"Reverted $1 to the version in master\"; }; f"
    soft = "!git reset --soft \"HEAD^\""
    s = status
    search = "!f() { git log -p -S \"$1\" -- \"${2:-.}\"; }; f"
    ss = "!git fetch --all && git branch -r --sort=-committerdate --format=\"%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)\" --color=always"
    t = "!git describe --abbrev=0"
    # list branches sorted by last modified
    b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"
    # https://gist.github.com/hlecuanda/c9a5091938cd6a7b585d
    squash = "!f(){ LEFTHOOK=0 HUSKY=0 git reset --soft HEAD~${1} && HUSKY=0 git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    tidy="!git remote prune origin && git branch --merged > /tmp/merged-branches && sed -E '/(staging|master)/d' /tmp/merged-branches > /tmp/clean-branches && nano /tmp/clean-branches && xargs git branch -d </tmp/clean-branches"
    # purge = "!git branch --no-merged | sed -E '/(^\*|master|dev|uat)/' | xargs git branch -df"
    #This is a useful one for me, it allows me to rebase with the tracking branch even if I have uncommitted changes. Credit goes to @cmsolomon.
    rb = "!f() { \
            echo fetching...; \
            git fetch; \
            if [ $? -eq 0 ]; then \
                last_status=$(git status --untracked-files=no --porcelain); \
                if [ \"$last_status\" != \"\" ]; then \
                    echo stashing local changes...; \
                    git stash; \
                else \
                    echo nothing to stash...; \
                fi;\
                if [ $? -eq 0 ]; then \
                    echo rebasing...;\
                    git rebase;\
                    if [ $? -eq 0 ]; then \
                        if [ \"$last_status\" != \"\" ]; then\
                            echo applying stashed changes...;\
                            git stash pop;\
                            if [ $? -ne 0 ]; then \
                                echo STASH POP FAIL - you will need to resolve merge conflicts with git mergetool; \
                            fi; \
                        fi; \
                    else \
                        echo REBASE FAILED - you will need to manually run stash pop; \
                    fi;\
                fi;\
            fi; \
            if [ $? -ne 0 ]; then \
                echo ERROR: Operation failed; \
            fi; \
        }; f"
	mine = checkout --ours
	theirs = checkout --theirs
	com = "!f() { if git show-ref --verify --quiet refs/heads/main; then git checkout main; else git checkout master; fi; }; f"
	oops = reset --soft HEAD~1
    myfiles = "!f() { git log --diff-filter=A --author=\"1107946+sidouglas@users.noreply.github.com\" --name-only --pretty=format: | sort -u; }; f"
    myedits = "!f() { git log --author=\"1107946+sidouglas@users.noreply.github.com\" --name-only --pretty=format: | grep -v '\\.snap$' | sort -u; }; f"
	masterlog = log origin/master --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
	fb = !git add -A && git commit -m \"PR feedback\"


  # Difftastic aliases, so `git dlog` is `git log` with difftastic and so on.
  dl = -c diff.external=difft log -p --ext-diff
  # Show the most recent commit with difftastic.
  ds = -c diff.external=difft show --ext-diff
  # `git diff` with difftastic.
  dft = -c diff.external=difft diff

[core]
  mergeoptions = --no-edit
  editor = vi
	excludesfile = /Users/simon.douglas/.gitignore_global
  pager = delta
[push]
  useForceIfIncludes = true
[delta]
  line-numbers = true
[pull]
  ff = true
	rebase = true
[push]
  autoSetupRemote = true
  default = current
[branch]
	sort = -committerdate
[commit]
	template = /Users/simon/.stCommitMsg
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[rerere]
  enabled = true
[column]
	ui = auto

[mergetool "sourcetree"]
	cmd = /usr/local/bin/bcomp \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
	trustExitCode = true

[difftool]
	prompt = false
    # Run the difftool immediately, don't ask 'are you sure' each time.
#     prompt = false

[pager]
    # Use a pager if the difftool output is larger than one screenful,
    # consistent with the behaviour of `git diff`.
    difftool = true

[diff]
	tool = deltawalker
    # Set difftastic as the default difftool, so we don't need to specify
    # `-t difftastic` every time.
#     tool = difftastic
[difftool "sourcetree"]
	cmd = /usr/local/bin/bcomp \"$LOCAL\" \"$REMOTE\"
	path = -ro
[difftool  "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Eclipse/Contents/Resources/git-diff' "$LOCAL" "$REMOTE"
[mergetool]
	keepBackup = false
[mergetool  "deltawalker"]
	cmd = '/Applications/DeltaWalker.app/Contents/Eclipse/Contents/Resources/git-merge' "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
